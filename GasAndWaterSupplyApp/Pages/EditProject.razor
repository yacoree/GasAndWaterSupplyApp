@page "/edit_project"
@using GasAndWaterSupplyApp.Data
@using System.Reflection
@using MongoDB.Bson;
@inject NavigationManager NavigationManager
@inject SingletonUserService singletonUserService


<h3>EditProject</h3>
<lable>@error</lable>
@if (currentUser is Customer)
{
    <label>Designer</label>
    <select @bind="@des">
        @foreach(var i in UsersDB.FindAllDesigner())
        {
            <option value="@i.Login">@((i as Designer).Name)</option>
        }
    </select><br />
    <label>Developer</label>
    <select @bind="@dev">
        @foreach (var i in UsersDB.FindAllDeveloper())
        {
            <option value="@i.Login">@((i as Developer).Name)</option>
        }
    </select>
    <br>
    <button class="btn btn-primary" @onclick="RegistrationClick">Sign up</button>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>File</th>
                <th>Accept</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in singletonUserService.GetProject().Documents)
            {
                <tr>
                    <td>@i.Type.Title</td>
                    <td>@i.FileId</td>
                    <input type="checkbox" @bind-value="i.Approved"></input>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="Save">Save</button>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>File</th>
                <th>Approved</th>
                <th>Send</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in singletonUserService.GetProject().Documents)
            {
                if (i.Type.Role == UserMaker.dictionary[singletonUserService.GetUser().GetType().Name])
                {
                    <tr>
                        <td>@i.Type.Title</td>
                        <td>
                            <InputFile OnChange="@LoadFiles"/>
                            @*<input type="file" @bind-value="@file">*@
                        </td>
                        @if (i.Approved)
                        {
                            <td class="bg-success">Approved</td>
                        }
                        else
                        {
                            <td >Rejected</td>
                        }
                        <button class="btn btn-primary" @onclick="@(() => SaveDocument(i))">Send file</button>
                    </tr>
                }
            }
        </tbody>
    </table>
    @file
}

@code {
    private User currentUser;
    private string file = string.Empty;
    private string dev;
    private string des;
    private string error;
    private ObjectId fileId;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            if (file != string.Empty)
            {
                error = "Save lasd document";
                return;
            }
            file = e.File.Name;
            var path = Path.GetFullPath($"wwwroot\\Fiels\\{file}");
            using (FileStream fs = new(path, FileMode.Create))
            {
                await e.File.OpenReadStream(1000000000).CopyToAsync(fs);
            }
            fileId = DocumentDB.AddFileToDataBase(path, file);
            //file = string.Empty;
        }
        catch (Exception ex)
        {
            error = $"{ex.Message}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currentUser = singletonUserService.GetUser();
    }

    private void RegistrationClick()
    {
        var newProject = singletonUserService.GetProject();
        User deigner = UsersDB.FindUserByLogin(des);
        User developer = UsersDB.FindUserByLogin(dev);
        if (deigner != null) newProject.Designer = (Designer)deigner;
        if (developer != null) newProject.Developer = (Developer)developer;
        ProjectDB.ReplaceProject(newProject.Name, newProject);
        singletonUserService.SetProject(newProject);

    }

    private void SaveDocument(Document document)
    {
        document.FileId = fileId.ToString();
        DocumentDB.AddDocumentToDataBase(document);
        ProjectDB.ReplaceProject(singletonUserService.GetProject().Name, singletonUserService.GetProject());
        file = string.Empty;
    }

    private void Save()
    {
        var newProject = singletonUserService.GetProject();
        ProjectDB.ReplaceProject(newProject.Name, newProject);
        singletonUserService.SetProject(newProject);
        //ProjectDB.ReplaceProject(singletonUserService.GetProject().Name, singletonUserService.GetProject());
    }
}
