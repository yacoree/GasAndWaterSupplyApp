@page "/profile"
@using GasAndWaterSupplyApp.Data
@using System.Reflection
@inject NavigationManager NavigationManager
@inject SingletonUserService singletonUserService

<h3>Profile</h3>
<label>@error</label>
@if (singletonUserService.GetUser() != null)
{
<div>
    @*<label>@error</label>*@
    <form>
        @foreach (var i in fields)
        {
            if (i.PropertyType == typeof(string) || i.PropertyType == typeof(int))
            {
                <label>@i.Name</label><br />
                <input type="text" @bind-value="@stringFieldValues[i.Name]">
                @*@bind-value = "@fieldValues[@i.Name]"*@
                <br>
            }
        }

        @if (UserMaker.dictionary.ContainsKey(singletonUserService.GetUser().GetType().Name))
        {
            if (UserMaker.dictionary[singletonUserService.GetUser().GetType().Name] == Roles.Customer)
            {
                <label>Choose your role</label>
                <br>
                <select @bind="customerIndustry">
                    @foreach (var i in (Enum.GetValues(typeof(Industries))))
                    {
                        <option value="@((Industries)i)">@i</option>
                    }
                </select>
                @*foreach (var i in Enum.GetValues(typeof(Industries)))
                {
                    <input class="form-check-input" type="radio" name="role" @onchange="@(() => UpdateIndustries((Industries)i))" checked="checked">
                    <b style="margin-right: 25px;">@i</b>
                }*@

            }
        }


    </form><br>
    <button class="btn btn-primary" @onclick="SaveChanges">Save changes</button>
    <button class="btn btn-primary" @onclick="LogOut">Log out</button>
</div>
}
            

@code {
    private User currentUser;
    private PropertyInfo[] fields;
    private List<string> defaulFields;
    private string error = string.Empty;
    private Dictionary<string, string> stringFieldValues;
    private Dictionary<string, Enum> enumFieldValues;
    private Industries customerIndustry;

    private void SaveChanges()
    {
        string field = string.Empty;
        //foreach (var i in stringFieldValues)
        //{
        //    if (i.Value == string.Empty) 
        //    {
        //        error = $"All fields must be filled in";
        //        return;
        //    }
        //}
        if (UsersDB.FindUserByLogin(stringFieldValues["Login"]) != null) field = "Login";
        else if (UsersDB.FindUserByTelephone(stringFieldValues["Telephone"]) != null) field = "Telephone";
        else if (UsersDB.FindUserByEmail(stringFieldValues["Email"]) != null) field = "Email";
        else 
        {
            User newUser;
            switch (UserMaker.dictionary[singletonUserService.GetUser().GetType().Name])
            {
                case Roles.Customer:
                    newUser = new Customer(stringFieldValues["Login"], stringFieldValues["Password"], stringFieldValues["Email"], stringFieldValues["Telephone"],
                    stringFieldValues["FName"], stringFieldValues["FName"], stringFieldValues["FName"], customerIndustry);
                    break;
                case Roles.Developer:
                    newUser = new Developer(stringFieldValues["Login"], stringFieldValues["Password"], stringFieldValues["Email"], stringFieldValues["Telephone"],
                    stringFieldValues["Name"], stringFieldValues["HeadOfExecutiveCommitteeOfRT"], stringFieldValues["Adress"],
                    stringFieldValues["OGRN"], stringFieldValues["INN"], stringFieldValues["KPP"]);
                    break;
                case Roles.Designer:
                    newUser = new Developer(stringFieldValues["Login"], stringFieldValues["Password"], stringFieldValues["Email"], stringFieldValues["Telephone"],
                    stringFieldValues["Name"], stringFieldValues["ChiefProjectEngineer"], stringFieldValues["Director"],
                    stringFieldValues["OGRN"], stringFieldValues["INN"], stringFieldValues["KPP"]);
                    break;
                default:
                    newUser = currentUser;
                    break;
            }
            UsersDB.ReplaceUser(currentUser.Login, newUser);
            singletonUserService.SetUser(newUser);
            return;
        }
        error = $"This {field} already used"; 
    }

    private void LogOut()
    {
        NavigationManager.NavigateTo("authorization");
        singletonUserService.SetUser(null);

    }

    protected override async Task OnInitializedAsync()
    {
        if (singletonUserService.GetUser() == null)
        {
            NavigationManager.NavigateTo("authorization");
            return;
        }
        switch (UserMaker.dictionary[singletonUserService.GetUser().GetType().Name])
        {
            case Roles.Customer:
                fields = typeof(Customer).GetProperties();
                break;
            case Roles.Developer:
                fields = typeof(Developer).GetProperties();
                break;
            case Roles.Designer: 
                fields = typeof(Designer).GetProperties();
                break;
            default:
                fields = typeof(User).GetProperties();
                break;
        }
        Array.Reverse(fields);
        defaulFields = typeof(User).GetProperties().Select(field => field.Name).ToList();
        currentUser = singletonUserService.GetUser();
        var defaulFieldsValues = singletonUserService.GetUser().GetType().GetProperties()
                        .ToDictionary(x => x.Name, x => x.GetValue(currentUser));
        stringFieldValues = new Dictionary<string, string>();

        foreach (var i in fields)
        {
            if (i.PropertyType == typeof(string))
            {
                stringFieldValues.Add(i.Name, string.Empty);
            }
        }

        foreach (var i in defaulFieldsValues)
        {
            foreach (var j in stringFieldValues)
            {
                if (i.Key == j.Key) 
                {
                    stringFieldValues[j.Key] = (i.Value == null ? string.Empty : i.Value.ToString());
                    break;
                }
            }
        }
    }

    private void UpdateIndustries(Industries industries)
    {
        this.customerIndustry = industries;
    }
    }
            